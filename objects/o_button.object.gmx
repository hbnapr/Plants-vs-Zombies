<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables for the button
width = 80;
height = 77;
hover = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust hover when the mouse is on us

xhover = (global.gui_mouse_x == median(x, global.gui_mouse_x, x + width));
yhover = (global.gui_mouse_y == median(y, global.gui_mouse_y, y + height));

hover = (xhover and yhover);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charge the button
if (charged &lt; delay) { charged++;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn an o_drag for a temporary plant
window_set_cursor(cr_none);
//Does the player have enough sun?
if (global.sun &gt;= cost) {

    //You can afford us, but are we ready to be clicked?
    if (charged == delay) {
    
        //Use hover to see if mouse is on us
        if (hover) {
        
            //Only spawn o_drag if it does not exist yet
            if (!instance_exists(o_drag)) {
        
            plant_sprite = asset_get_index("s_" + name);
            plant_object = asset_get_index("o_" + name);
            plant_width = sprite_get_width(plant_sprite);
            plant_height = sprite_get_height(plant_sprite);
        
            //Spawn a temporary drag object and set its sprite index
            plant = instance_create(mouse_x - (plant_width / 2), mouse_y - (plant_height / 2), o_drag);
            with (o_drag) {
                sprite = other.plant_sprite;
                object = other.plant_object;
                width = other.plant_width;
                height = other.plant_height;
                cost = other.cost;
            }
        
            //Recharge Time
            charged = 0;
            
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the overlay

//Does the player have enough sun?
if (global.sun &gt;= cost) {

    //You can afford us, but are we ready to be clicked?
    if (charged == delay) {
    
        //Hover white when the mouse is on us and o_drag has no instances
        if (hover) {
            draw_set_alpha(0.25);
            draw_set_color(c_white);
            draw_rectangle(x, y, x + width, y + height, false);
        } 
    
    } else {
        //Draw dark black overlays
        charge_pct = (1 / delay) * charged;
        charge_height = height * (1 - charge_pct);
        draw_set_alpha(0.25);
        draw_set_color(c_black);
        draw_rectangle(x, y, x + width, y + charge_height, false);
    
        
    }

} else {    
    //Draw dark black overlays
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(x, y, x + width, y + height, false);
}

//Reset the alpha
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
